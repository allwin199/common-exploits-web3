// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import {Test} from "forge-std/Test.sol";
import {StatelessFuzzCatches} from "../../src/invariant-break/StatelessFuzzCatches.sol";

contract StatelessFuzzCatchesTest is Test {
    StatelessFuzzCatches statelessFuzzCatches;

    function setUp() public {
        statelessFuzzCatches = new StatelessFuzzCatches();
    }

    function test_doMath_Returns0_UsingUnitTest() public {
        uint256 returnVal = statelessFuzzCatches.doMath(1);
        assertEq(returnVal, 1);
    }
    // The above unit test ran successfully
    // It didn't catch any bug
    // We can iterate values from 1 to 50 and figure out whether do math returns 0

    function test_doMath_Returns0_UsingUnitTest_Iterations() public {
        uint128 inputVal;

        for (uint128 i = 0; i < 50; i++) {
            inputVal = i;
        }

        uint256 returnVal = statelessFuzzCatches.doMath(inputVal);
        assertEq(returnVal, 1);
    }
    // Even after iterating from 1-50 this test didn't catch any bugs
    // We can increase the iteration from 1-100 or 1-1000 and try to find bugs
    // or we can use fuzz testing

    // To make a fuzz testing, we have to give input args in the test function
    function test_doMath_Returns0_UsingFuzz(uint128 inputVal) public {
        uint256 returnVal = statelessFuzzCatches.doMath(inputVal);
        assertEq(returnVal, 1);
    }
    // [FAIL. Reason: assertion failed; counterexample: calldata=0xbb68746d0000000000000000000000000000000000000000000000000000000000000045 args=[69]] test_doMath_Returns0_UsingFuzz(uint128) (runs: 690, μ: 5728, ~: 5728)

    // We ran fuzz for [1000] runs
    // It took `690` runs for the fuzzer to break this test
    // because the fuzzer will through some random data to the test case

    // To make a fuzz testing, we have to give input args in the test function
    // We are also bounding the inputData
    function test_doMath_Returns0_UsingFuzz_Bounded(uint256 inputVal) public {
        inputVal = bound(inputVal, 0, 500);
        uint256 returnVal = statelessFuzzCatches.doMath(uint128(inputVal));
        assertEq(returnVal, 1);
    }
    // [FAIL. Reason: assertion failed; counterexample: calldata=0xfb0f65ce00000000000000000000000000000000000000000000000000000000000d3be4 args=[867300 [8.673e5]]] test_doMath_Returns0_UsingFuzz_Bounded(uint256) (runs: 307, μ: 9688, ~: 9861)
    // Logs:
    // Bound Result 69

    // Intead of giving random data as input val
    // we are restricting the random val from 1-500
    // It will not go from 1 to 500 in order but
    // all the random data will stay between the range of 1-500
}
