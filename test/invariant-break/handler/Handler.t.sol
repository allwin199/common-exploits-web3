// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import {Test} from "forge-std/Test.sol";
import {StdInvariant} from "forge-std/StdInvariant.sol";
import {HandlerStatefulFuzzCatches} from "../../../src/invariant-break/HandlerStatefulFuzzCatches.sol";
import {MockUSDC} from "../../mocks/MockUSDC.sol";
import {YeildERC20} from "../../mocks/YieldERC20.sol";

contract Handler is StdInvariant, Test {
    HandlerStatefulFuzzCatches handlerStatefulFuzzCatches;
    MockUSDC mockUSDC;
    YeildERC20 yeildERC20;
    uint256 initialAmount;
    address user;

    // HandlerFuzzCatches contract is deployed in `HandlerFuzzCatchesTest.t.sol`
    // we have to get that deployed contract
    // we also need valid erc20 tokens
    // In order to run handler based fuzz testing
    constructor(
        HandlerStatefulFuzzCatches _handlerStatefulFuzzCatches,
        MockUSDC _mockUSDC,
        YeildERC20 _yeildERC20,
        address _user
    ) {
        handlerStatefulFuzzCatches = _handlerStatefulFuzzCatches;
        mockUSDC = _mockUSDC;
        yeildERC20 = _yeildERC20;
        user = _user;
        initialAmount = yeildERC20.INITIAL_SUPPLY();
    }

    function depositYeildERC20(uint256 depositAmount) public {
        // user can only deposit whatever the balance they have
        // thats why we are bounding the deposit amount
        depositAmount = bound(depositAmount, 0, yeildERC20.balanceOf(user));

        vm.startPrank(user);

        // user also has to approve the `handlerStatefulFuzzCatches` to make transfers on behalf of
        yeildERC20.approve(address(handlerStatefulFuzzCatches), depositAmount);

        // let's deposit
        handlerStatefulFuzzCatches.depositToken(yeildERC20, depositAmount);

        vm.stopPrank();
    }

    function depositMockUSDC(uint256 depositAmount) public {
        // user can only deposit whatever the balance they have
        // thats why we are bounding the deposit amount
        depositAmount = bound(depositAmount, 0, mockUSDC.balanceOf(user));

        vm.startPrank(user);

        // user also has to approve the `handlerStatefulFuzzCatches` to make transfers on behalf of
        mockUSDC.approve(address(handlerStatefulFuzzCatches), depositAmount);

        // let's deposit
        handlerStatefulFuzzCatches.depositToken(mockUSDC, depositAmount);

        vm.stopPrank();
    }

    function withdrawYieldERC20() public {
        vm.startPrank(user);
        handlerStatefulFuzzCatches.withdrawToken(yeildERC20);
        vm.stopPrank();
    }

    function withdrawMockUSDC() public {
        vm.startPrank(user);
        handlerStatefulFuzzCatches.withdrawToken(mockUSDC);
        vm.stopPrank();
    }
}
