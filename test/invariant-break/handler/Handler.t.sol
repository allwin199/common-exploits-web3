// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import {Test} from "forge-std/Test.sol";
import {StdInvariant} from "forge-std/StdInvariant.sol";
import {HandlerStatefulFuzzCatches} from "../../../src/invariant-break/HandlerStatefulFuzzCatches.sol";
import {MockUSDC} from "../../mocks/MockUSDC.sol";
import {YeildERC20} from "../../mocks/YieldERC20.sol";

contract Handler is StdInvariant, Test {
    HandlerStatefulFuzzCatches handlerStatefulFuzzCatches;
    MockUSDC mockUSDC;
    YeildERC20 yeildERC20;

    // HandlerFuzzCatches contract is deployed in `HandlerFuzzCatchesTest.t.sol`
    // we have to get that deployed contract
    // we also need valid erc20 tokens
    // In order to run handler based fuzz testing
    constructor(HandlerStatefulFuzzCatches _handlerStatefulFuzzCatches, MockUSDC _mockUSDC, YeildERC20 _yeildERC20) {
        handlerStatefulFuzzCatches = _handlerStatefulFuzzCatches;
        mockUSDC = _mockUSDC;
        yeildERC20 = _yeildERC20;
    }

    function depositMockDSCToken_UsingHandler() public {
        // handlerStatefulFuzzCatches.depositToken();
    }
}
