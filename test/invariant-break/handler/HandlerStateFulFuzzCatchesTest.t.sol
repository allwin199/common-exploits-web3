// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import {Test} from "forge-std/Test.sol";
import {StdInvariant} from "forge-std/StdInvariant.sol";
import {HandlerStatefulFuzzCatches} from "../../../src/invariant-break/HandlerStatefulFuzzCatches.sol";
import {MockUSDC} from "../../mocks/MockUSDC.sol";
import {YeildERC20} from "../../mocks/YieldERC20.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract HandlerStatefulFuzzCatchesTest is StdInvariant, Test {
    // Invariant
    // Users must always be able to withdraw the exact deposited amount

    HandlerStatefulFuzzCatches handlerStatefulFuzzCatches;
    MockUSDC mockUSDC;
    YeildERC20 yeildERC20;

    address user1 = makeAddr("user1");

    IERC20[] supportedTokens;

    function setUp() public {
        mockUSDC = new MockUSDC();
        yeildERC20 = new YeildERC20();

        supportedTokens.push(IERC20(mockUSDC));
        supportedTokens.push(IERC20(yeildERC20));

        handlerStatefulFuzzCatches = new HandlerStatefulFuzzCatches(supportedTokens);

        // targetContract
        targetContract(address(handlerStatefulFuzzCatches));
    }
}
