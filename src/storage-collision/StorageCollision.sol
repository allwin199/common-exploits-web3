// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import {Proxy} from "@openzeppelin/contracts/proxy/Proxy.sol";

contract StorageCollisionProxy is Proxy {
    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;

    function setImplementation(address newImplementation) public {
        assembly {
            sstore(_IMPLEMENTATION_SLOT, newImplementation)
        }
    }

    function _implementation() internal view override returns (address implementationAddress) {
        assembly {
            implementationAddress := sload(_IMPLEMENTATION_SLOT)
        }
    }

    // helper function
    function getDataToTransact(uint256 numberToUpdate) public pure returns (bytes memory) {
        return abi.encodeWithSignature("setValue(uint256)", numberToUpdate);
    }

    function readStorage(uint256 storageSlot) public view returns (uint256 vauleAtStorageSlot) {
        assembly {
            vauleAtStorageSlot := sload(storageSlot)
        }
    }

    receive() external payable {
        _fallback();
    }
}

contract ImplementationA {
    uint256 public value;

    function setValue(uint256 newValue) public {
        value = newValue;
    }
}

contract ImplementationB {
    // Ah!!! This will ruin the storage of our proxy!!
    bool public initialized;
    // Why did we switch the order??
    uint256 public value;

    function setValue(uint256 newValue) public {
        value = newValue + 2;
    }
}

// We have a proxy contract and ImplementationA and ImplementationB
// Let's deploy the `ImplementationA` contract
// Let's deploy the `ImplementationB` contract
// Let's deploy the proxy contract which is `StorageCollisionProxy`
// In `setImplementation` give the address of `ImplementationA` as params
// Now storage collison proxy is currently pointing to ImplementationA
// To interact with, copy the proxy address
// Below the `deploy` there is a button called, `At address`
// paste the proxy contract
// select `ImplementationA` in the `contract`
// click `At Address`
// call `setValue(15)`
// value will become `15`

// Go to proxy contract again and
// In `setImplementation` give the address of `ImplementationB` as params
// Now storage collison proxy is currently pointing to ImplementationB
// To interact with, copy the proxy address
// Below the `deploy` there is a button called, `At address`
// paste the proxy contract
// select `ImplementationB` in the `contract`
// In the `ImplementationB` at `slot0`
// bool public initialized;
// bool will always start with 0
// but if we check `initialized` it will be true
// the reason its `true` because
// before upgrading `value` was at storage `slot0`
// and value was `15`
// due to upgradation `uint` is changed to `bool`
// since `15` is a non-zero value
// bool will return `true`
// value at ImplementationB is at `slot1`
// and it will return 0

// By upgrading, storage slots are messed up

// Mitigation
// In `ImplementationB` re-order the storage slot
// uint256 value
// bool initialized
// now everything will work correctly
