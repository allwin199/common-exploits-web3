// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

contract FailureToInitialize {
    uint256 public myValue;
    bool public initialized;

    function initialize(uint256 _startingValue) public {
        myValue = _startingValue;
        initialized = true;
    }

    // We should have a check here to make sure the contract was initialized!
    function increment() public {
        myValue++;
    }

    // Steps to exploit
    // 1. Deploy the contract
    // 2. Check whether it is initialized?
    // it will return false
    // 3. Check my value
    // it will return 0
    // trigger increment 5 times
    // value will return 5
    // after all of this transactions passed by
    // call `initialize` with 123
    // value will return 123
    // which means original value was overwritten
    // Image instead of value,
    // what if all the users balance is reset to 0
    // users will not be able to withdraw the funds
    // funds will get stuck inside the contract

    // Additionally, if the `initializer` dosen't have any `initializer` control
    // this initializer can be called again
    // use openzeppelin `initializer` modifier
}
